{"version":3,"sources":["jquery.mechounter.js"],"names":["factory","define","amd","exports","require","window","jQuery","$","lgSpeed","t","k","Math","pow","lgValue","toLog10","lgValueBySpeed","s","timeByLgVal","v","timeByLgSpeed","frLog10","log","repeatStr","str","Mecntr","el","opts","self","this","_opts","extend","defaultOptions","mask","_parseMask","_validateOpts","$el","addClass","baseClass","Object","defineProperty","enumerable","configurable","get","h","height","value","writable","_digits","_initDom","execute","action","param1","param2","spinTo","newVal","delayMs","resetTo","setImmediate","getValue","destroy","Digit","owner","sep","o","$sep","_thousandSepStr","prependTo","_digitStr","html","_makeSpan","$all","add","_showMs","showDigitMs","_num","length","animate","width","opacity","$cards","find","$card0","eq","$card1","empty","wasted","fn","options","data","each","mecntr","decimalSep","thousandSep","refreshDelayMs","resetDelayMs","spinCloserDelayMs","spinCloserSmoothDelayMs","spinCloserMinStep","perceptibleShift","onBeforeSpin","valueDelta","startValue","onSpinStep","timeFromStartMs","currentValue","pluginName","allActions","split","prototype","indexOf","exec","digits","decimals","min","max","floor","intDigits","multiplier","type","text","_addSpan","_oldHtml","_addDecimalDigit","_addDigit","_addIntDigitWithSep","_addIntDigit","_intDigits","_setImmediate","clearInterval","_interval","digit","frac","dLen","d","_value","setVisValue","_dropEmptyDigits","push","_calcSlowdownParams","aDif","delay","cb","t2o","t2","t1","ko","kf","spN","sp_","dt","_setSpeed","_speed","_perceptibleDgt","spinCloserOrResetTo","oldVal","now","Date","_lastCallMs","_spinTo","_isResetInProgress","_onResetDone","dif","isInc","sgn","abs","t1_","t2_","k_","spN_","_startTime","_maxPerceptibleDgt","_currentValues","timeMs","oV","nV","oFl","nFl","oFr","nFr","createValueUpdaterForSet","setInterval","_elapsed","_updateValue","_resetTo","_finalizeValueReset","maxDif","prepareValueIntervalForReset","v2","createValueUpdaterForReset","remove","removeClass","reveal","immediate","stop","hide","dstVal","_srcVal","_dstVal","_aDif","oldVisVal","newVisVal","_setVisValue","setVis2Value","limit","fracPrev","round","percDiff","rnDgt","shift0","_height","shift1","css","zero","zRnDgt","_zRnDgt"],"mappings":"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","file":"../jquery.mechounter.min.js","sourcesContent":[";(function (factory) {\n  'use strict';\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define([\n      'jquery',\n      'jquery.ui.widget'\n    ], factory);\n  } else if (typeof exports === 'object') {\n    // Node/CommonJS:\n    factory(\n      require('jquery'),\n      require('./vendor/jquery.ui.widget')\n    );\n  } else {\n    // Browser globals:\n    factory(window.jQuery);\n  }\n}(function($){\n\n  //******************************\n  //      extending jQuery\n  //******************************\n\n  var pluginName = \"mechounter\";\n\n  $.fn[pluginName] = function(action, param1, param2){\n    var options = param1;\n    if(action == null || typeof action === \"object\"){\n      options = action || {};\n      action = \"create\";\n    }\n\n    if(typeof action === \"number\"){\n      param1 = action;\n      action = \"spinCloserOrResetTo\";\n    }\n\n    if(action === \"get\"){\n      return this.eq(0).data(pluginName);\n    }\n\n    if(action === \"getValue\"){\n      return this.eq(0).data(pluginName).getValue();\n    }\n\n    if(action === \"create\"){\n      return this.each(function(){\n\n        var $el = $(this);\n\n        if($el.data(pluginName)) return;\n        $el.data(pluginName, new Mecntr($el, options));\n\n      });\n    }\n\n    if(action === \"getDefaults\"){\n      return Mecntr.defaultOptions;\n    }\n\n    return this.each(function(){\n      var mecntr = $(this).data(pluginName);\n      if(mecntr) mecntr.execute(action, param1, param2);\n    });\n  };\n\n  //******************************\n  //   Precalculated constants\n  //******************************\n\n  var toLog10 = 0.4342944819032518; // === 1 / Math.log(10)\n  var frLog10 = 2.302585092994046;  // === Math.log(10)\n\n  //******************************\n  //  Main calculation functions\n  //******************************\n\n  function lgSpeed(t, k){\n    k = k || 1;\n    return Math.pow(10, k*t-2);\n  }\n\n  function lgValue(t, k){\n    k = k || 1;\n    return toLog10 * lgSpeed(t, k) / k;\n  }\n\n  function lgValueBySpeed(s, k){\n    k = k || 1;\n    return toLog10 * s / k;\n  }\n\n  function timeByLgVal(v, k){\n    k = k || 1;\n    return timeByLgSpeed(v * k * frLog10, k);\n  }\n\n  function timeByLgSpeed(s, k){\n    k = k || 1;\n    return (toLog10 * Math.log(s) + 2) / k;\n  }\n\n  //******************************\n  //      Helper functions\n  //******************************\n\n  function repeatStr(t, str){\n    var s = str;\n    while(--t){ s+= str }\n    return s;\n  }\n\n  ///////////////////////////////////////////////\n\n  //*********************************************\n  //      MechanicalCounter (Mecntr) Class\n  //*********************************************\n\n  function Mecntr(el, opts){\n\n    var self = this;\n\n    this._opts = opts = $.extend(Mecntr.defaultOptions, opts);\n\n    if(opts.mask){\n      this._parseMask(opts.mask, this._opts);\n    }\n\n    this._validateOpts();\n\n    this.$el = $(el).addClass(this._opts.baseClass);\n\n    Object.defineProperty(this, \"_height\", {\n      enumerable: true,\n      configurable: true,\n      get: function(){\n        var h = self.$el.height();\n        if(h <= 0) return -10000;\n        Object.defineProperty(self, \"_height\", {\n          value: h,\n          writable: true,\n          enumerable: true\n        });\n        return h;\n      }\n    });\n    this._digits = [];\n\n    this._initDom();\n\n    return {\n      execute: function (action, param1, param2) {\n        return self.execute(action, param1, param2);\n      },\n      spinTo: function(newVal, delayMs){\n        return self.spinTo(newVal, delayMs);\n      },\n      resetTo: function(newVal){\n        return self.resetTo(newVal);\n      },\n      setImmediate: function(newVal){\n        return self.resetTo(newVal);\n      },\n      getValue: function(){\n        return self.getValue();\n      },\n      destroy: function(){\n        return self.destroy();\n      }\n    }\n\n  };\n\n  Mecntr.defaultOptions = {\n    mask: \"3.2\",\n    decimalSep: \".\",\n    thousandSep: \"\",\n    value: 0,\n    baseClass: pluginName,\n    showDigitMs: 300,\n    refreshDelayMs: 30,\n    resetDelayMs: 2500,\n    spinCloserDelayMs: 20000,\n    spinCloserSmoothDelayMs: 1000,\n    spinCloserMinStep: 0.15,\n    perceptibleShift: 0.2,\n    onBeforeSpin: function(delayMs, valueDelta, startValue){},\n    onSpinStep: function(timeFromStartMs, currentValue){}\n  };\n  Mecntr.pluginName = pluginName;\n\n  var allActions = \"spinTo,resetTo,setImmediate,spinCloserOrResetTo,destroy\".split(\",\");\n  Mecntr.prototype.execute = function (action, param1, param2) {\n    if(!~allActions.indexOf(action)) return;\n    this[action](param1, param2);\n  };\n\n  Mecntr.prototype._parseMask = function (mask, o){\n\n    mask = /(\\D?)(\\d+)((\\D)(\\d+))?/.exec(mask);\n\n    if(!mask) return;\n\n    o = o || {};\n\n    o.thousandSep = mask[1];\n\n    o.digits = mask[2];\n\n    o.decimalSep = mask[4] || \".\";\n\n    o.decimals = mask[5];\n\n  };\n\n  Mecntr.prototype._validateOpts = function () {\n    var o = this._opts;\n    o.digits   = Math.min(15,         Math.max(1, Math.floor(+o.digits)   || 1));\n    o.decimals = Math.min(o.digits-1, Math.max(0, Math.floor(+o.decimals) || 0));\n    o.intDigits = o.digits - o.decimals;\n    o.multiplier = Math.pow(10, o.decimals);\n  };\n\n  Mecntr.prototype._makeSpan = function (type, text){\n    return \"<span class='\" + this._opts.baseClass + \"-\" + type + \"'>\" + text + \"</span>\";\n  };\n\n  Mecntr.prototype._addSpan = function (type, text){\n    return $(this._makeSpan(type, text)).prependTo(this.$el);\n  };\n\n  Mecntr.prototype._initDom = function (){\n    var self = this\n    , o = this._opts\n    , decimals = o.decimals\n    , intDigits = o.intDigits\n    ;\n\n    this._oldHtml = this.$el.html();\n    this.$el.html(\"\");\n    this._digitStr = this._makeSpan(\"digit\",\"\");\n    this._thousandSepStr = this._makeSpan(\"thousandSep\", o.thousandSep);\n\n    if(decimals){\n      while(decimals--) this._addDecimalDigit();\n      $(this._makeSpan(\"decimalSep\", o.decimalSep)).prependTo(self.$el);\n    }\n\n    this._addDigit = o.thousandSep ? this._addIntDigitWithSep : this._addIntDigit;\n\n    this._intDigits = 0;\n    this._addIntDigit();\n    while(intDigits--) this._addDigit();\n\n    this.setImmediate(o.value);\n\n  };\n\n  Mecntr.prototype.setImmediate = function(v){\n    this._setImmediate(v * this._opts.multiplier);\n  };\n\n  Mecntr.prototype._setImmediate = function(v){\n\n    clearInterval(this._interval);\n\n    var o = this._opts\n    , dLen = this._digits.length\n    ;\n    var digit, d = 1, frac, empty;\n\n    this._value = v;\n    frac = this._digits[0].setVisValue(v);\n    v = Math.floor(v * 0.1);\n\n    while(v > 0 || d < o.digits || d < dLen){\n      empty = v < 1 && d >= o.digits;\n\n      digit = this._digits[d++] || this._addDigit();\n      frac = digit.setVisValue(v + frac, empty);\n      v = Math.floor(v * 0.1);\n    }\n\n    this._dropEmptyDigits();\n\n  };\n\n  Mecntr.prototype._addDecimalDigit = function(sep){\n    var digit = new Digit(this, sep);\n    this._digits.push(digit);\n    return digit;\n  };\n\n  Mecntr.prototype._addIntDigit = function(sep){\n    this._intDigits++;\n    return this._addDecimalDigit(sep);\n  };\n\n  Mecntr.prototype._addIntDigitWithSep = function(){\n    return this._addIntDigit(this._intDigits % 3 === 0);\n  };\n\n  Mecntr.prototype._calcSlowdownParams = function(aDif, delay, cb){\n    var t2 = timeByLgVal(aDif)  // time in seconds of spin slowdown\n    , t2o     // old value of \"t2\"\n    , t1 = 0  // time in seconds of constant spin speed\n    , k = 1   // spin slowdown intensification coefficient (initial value would be minimal)\n    , ko = k  // old value of \"k\"\n    , kf = 1  // fraction of modification coefficient for \"k\"\n    , spN = 0 // initial spin speed of spin slowdown (rounds of dif per second)\n    , sp_ = 1 // constant spin speed\n    , dt = t2 // value delta for \"t2\" correction\n    ;\n\n    if(t2 > delay){\n\n      do {\n        t2o = t2;\n\n        k *= 1 + kf;\n        t2 = timeByLgVal(aDif, k);\n        if(t2 < delay) {\n          kf *= 0.5;\n          k = ko;\n        }else{\n          ko = k;\n        }\n      } while(t2o !== t2);\n\n    }else{\n\n      do {\n        t2o = t2;\n\n        dt *= 0.5;\n        t2 += spN > sp_ ? dt : -dt;\n        t1 = delay - t2;\n        sp_ = lgSpeed(t2);\n        spN = (aDif - lgValueBySpeed(sp_)) / t1;\n      } while(t2o !== t2);\n\n    }\n\n    cb(t1, t2, k, lgSpeed(t2, k));\n\n  };\n\n  Mecntr.prototype._setSpeed = function(spN){\n    var o = this._opts;\n    this._speed = spN * 0.001;\n    this._perceptibleDgt = toLog10 * Math.log(this._speed * o.multiplier) - o.perceptibleShift;\n  };\n\n  Mecntr.prototype.getValue = function(){\n    return this._value / this._opts.multiplier;\n  };\n\n  Mecntr.prototype.spinCloserOrResetTo = function(newVal){\n\n    var oldVal = this.getValue();\n\n    if(newVal === oldVal) return;\n\n    var o = this._opts\n    , now\n    , delayMs\n    ;\n\n    if(oldVal > newVal){\n      this.resetTo(newVal);\n      return;\n    }\n\n    if(newVal - oldVal < o.spinCloserMinStep) return;\n\n    if(o.spinCloserDelayMs){\n      this.spinTo(newVal, o.spinCloserDelayMs);\n      return;\n    }\n\n    now = Date.now();\n    delayMs = now - this._lastCallMs || now;\n\n    this._lastCallMs = now;\n\n    this.spinTo(newVal, delayMs + o.spinCloserSmoothDelayMs);\n  };\n\n  Mecntr.prototype.spinTo = function(newVal, delayMs){\n    this._spinTo(newVal * this._opts.multiplier, delayMs);\n  };\n\n  Mecntr.prototype._spinTo = function(newVal, delayMs){\n\n    if(this._isResetInProgress){\n      this._onResetDone = function(){\n        this._spinTo(newVal, delayMs);\n      };\n      return;\n    }\n\n    if(!delayMs || this._value === newVal){\n      clearInterval(this._interval);\n      this._setImmediate(newVal);\n      return;\n    }\n\n    var self = this\n    , o = this._opts\n    , oldVal = this._value\n    , delay = delayMs * 0.001\n    , dif = newVal - oldVal\n    , isInc = dif > 0\n    , sgn = isInc ? 1 : -1\n    , aDif = Math.abs(dif)\n    , k = 1   // spin slowdown intensification coefficient (k >= 1 always)\n    , spN = 0 // initial spin speed (rounds of dif per second)\n    , t1 = 0  // time in seconds of constant spin speed\n    , t2      // time in seconds of spin slowdown\n    ;\n\n    clearInterval(self._interval);\n    this._setImmediate(oldVal);\n\n    this._calcSlowdownParams(aDif, delay, function (t1_, t2_, k_, spN_){\n      t1 = t1_; t2 = t2_; k = k_; spN = spN_;\n    });\n\n    this._startTime = Date.now();\n    this._setSpeed(spN);\n    this._maxPerceptibleDgt = this._perceptibleDgt;\n\n    this._currentValues = function(timeMs){\n      var t = timeMs * 0.001;\n\n      if(t <= t1){\n        self._value = oldVal + sgn * spN * t;\n        return;\n      }\n      t -= t1;\n\n      spN = lgSpeed(t2 - t, k);\n      self._setSpeed(spN);\n      self._value = newVal - sgn * lgValueBySpeed(spN, k);\n      if(sgn * self._value < sgn * oldVal){\n        self._value = oldVal;\n      }\n    };\n\n    (function(){\n      var d = 0\n      , dLen = self._digits.length\n      , digit\n      , oV = oldVal\n      , nV = newVal\n      , oFl = Math.floor(oV)  //floor part\n      , nFl = Math.floor(nV)  //floor part\n      , oFr = oV - oFl     //flaction part\n      , nFr = nV - nFl     //flaction part\n      ;\n\n      while(nV >= 0.1 || d < dLen){\n        digit = self._digits[d++] || self._addDigit();\n        digit.createValueUpdaterForSet(oV, nV, isInc);\n\n        oFr = oFl % 10 === 9 ? oFr : 0;\n        oFl = Math.floor(oFl * 0.1);\n        oV = oFl + oFr;\n\n        nFr = nFl % 10 === 9 ? nFr : 0;\n        nFl = Math.floor(nFl * 0.1);\n        nV = nFl + nFr;\n      }\n\n    })();\n\n    o.onBeforeSpin(delayMs, dif, oldVal);\n\n    self._interval = setInterval(function(){\n\n      var t = self._elapsed();\n\n      if(t >= delayMs){\n        clearInterval(self._interval);\n        self._setImmediate(newVal);\n        return;\n      }\n\n      self._currentValues(t);\n      o.onSpinStep(t, self._value);\n\n      var v = self._value + isInc  //when increasing we need a one value margin\n      , dLen = self._digits.length\n      ;\n      var d = 0, frac = 0, empty;\n\n      while(d < dLen){\n        empty = v < 1 && d >= o.digits;\n\n        frac = self._digits[d++]._updateValue(v, frac, empty);\n        v = v * 0.1;\n      }\n\n      self._dropEmptyDigits();\n\n    }, o.refreshDelayMs);\n\n  };\n\n  Mecntr.prototype.resetTo = function(newVal){\n    this._resetTo(newVal * this._opts.multiplier);\n  };\n\n  Mecntr.prototype._resetTo = function(newVal){\n\n    var o = this._opts;\n\n    if(this._value === newVal){\n      this._finalizeValueReset(newVal);\n      return;\n    }\n\n    this._isResetInProgress = true;\n\n    var self = this\n    , oldVal = this._value\n    , delayMs = o.resetDelayMs\n    , delay = delayMs * 0.001\n    , dLen = self._digits.length\n    , maxDif = 0\n    , t1   // time in seconds of constant spin speed\n    , t2   // time in seconds of spin slowdown\n    , k    // spin slowdown intensification coefficient (k >= 1 always)\n    , spN  // initial spin speed (rounds of dif per second)\n    ;\n\n    //searching for maximum digit value difference while reset\n    (function(v){\n      var dif\n      , d = 0\n      ;\n\n      while(d < dLen){\n        dif = self._digits[d++].prepareValueIntervalForReset(v);\n        if(dif > maxDif) maxDif = dif;\n        v = Math.floor(v * 0.1);\n      }\n      delay = delay * 0.1 * maxDif;\n      delayMs = delayMs * 0.1 * maxDif;\n\n      //adding incufficient digits for new value\n      while(v > 0){\n        self._addDigit().setVisValue(v);\n        v = Math.floor(v * 0.1);\n      }\n    })(newVal);\n\n    this._calcSlowdownParams(maxDif, delay, function (t1_, t2_, k_, spN_){\n      t1 = t1_; t2 = t2_; k = k_; spN = spN_;\n    });\n\n    //creating value update methods for each digit of old value\n    (function(){\n      var d = 0\n      , v2 = lgValueBySpeed(spN, k)\n      ;\n\n      while(d < dLen){\n        self._digits[d++].createValueUpdaterForReset(k, t2, spN, v2);\n      }\n\n    })();\n\n    //setup and run animation\n    this._startTime = Date.now();\n    this._value = newVal;\n    clearInterval(self._interval);\n    self._interval = setInterval(function(){\n      var d = 0, t = self._elapsed();\n\n      if(t >= delayMs){\n        self._finalizeValueReset(newVal);\n        return;\n      }\n\n      t *= 0.001;\n\n      while(d < dLen){\n        self._digits[d++]._updateValue(t);\n      }\n\n    }, o.refreshDelayMs);\n\n  };\n\n  Mecntr.prototype._finalizeValueReset = function(newVal){\n    clearInterval(this._interval);\n    this._isResetInProgress = null;\n    this._setImmediate(newVal);\n    if(this._onResetDone){\n      this._onResetDone();\n      this._onResetDone = null;\n    }\n  };\n\n  Mecntr.prototype._dropEmptyDigits = function(){\n    var d = this._digits.length\n    , digit = this._digits[--d]\n    ;\n\n    if(!digit.wasted) return;\n\n    do {\n      digit.remove();\n      this._intDigits--;\n      digit = this._digits[--d];\n    } while(digit.wasted);\n\n    this._digits.length = ++d;\n\n  };\n\n  Mecntr.prototype._elapsed = function(){\n    return Date.now() - this._startTime;\n  };\n\n  Mecntr.prototype.destroy = function(){\n    clearInterval(this._interval);\n    this.$el.removeClass(this._opts.baseClass).html(this._oldHtml);\n    delete this.$el.data()[pluginName];\n  };\n\n  //************************************\n  //            Digit Class\n  //   (helper for MechanicalCounter)\n  //************************************\n\n  function Digit(owner, sep){\n    this.owner = owner;\n    var o = this.owner._opts;\n\n    if(sep){\n      this.$sep = $(owner._thousandSepStr).prependTo(owner.$el);\n    }\n\n    this.$el = $(owner._digitStr).prependTo(owner.$el);\n    this.$el.html(owner._makeSpan(\"rect\", \"0\") + repeatStr(2, owner._makeSpan(\"card\", \"\")));\n\n    this.$all = this.$el.add(this.$sep);\n    this._showMs = o.showDigitMs;\n    this._num = owner._digits.length;\n    this.$all.animate({\n      width: \"toggle\",\n      opacity: 0.01\n    }, 0);\n\n    var $cards = this.$el.find(\".\" +o.baseClass + \"-card\");\n    this.$card0 = $cards.eq(0);\n    this.$card1 = $cards.eq(1);\n    this.empty = true;\n    this.wasted = false;\n  };\n\n  Digit.prototype.reveal = function(){\n    this.$all.animate({\n      width: \"toggle\"\n    }, this._showMs).animate({\n      opacity: 1\n    }, this._showMs);\n  };\n\n  Digit.prototype.remove = function(immediate){\n\n    if(immediate) return this.$all.remove();\n\n    var self = this;\n\n    self.$all.stop(true).animate({\n      opacity:0.01\n    }, this._showMs).hide(this._showMs,function(){\n      self.$all.remove();\n    });\n\n  };\n\n  Digit.prototype.prepareValueIntervalForReset = function(dstVal){\n    this._srcVal = this._value % 10;\n    this._dstVal = dstVal % 10;\n    if(this._dstVal < this._srcVal) this._dstVal += 10;\n    this._aDif = this._dstVal - this._srcVal;\n\n    return this._aDif;\n  };\n\n  Digit.prototype.createValueUpdaterForReset = function(k, t2_, spN, v2){\n    var self = this\n    , t2\n    , t1 = 0\n    , delay\n    ;\n\n    if(v2 > this._aDif){\n      t2 = timeByLgVal(this._aDif, k);\n    }else{\n      t2 = t2_;\n      t1 = (this._aDif - v2) / spN;\n    }\n\n    delay = t1 + t2;\n\n    this._updateValue = function(t){\n      if(t > delay){\n        self.setVisValue(self._dstVal);\n        return;\n      }\n\n      if(t <= t1){\n        self.setVisValue(self._srcVal + spN * t);\n        return;\n      }\n\n      t -= t1;\n      self.setVisValue(self._dstVal - lgValue(t2 - t, k));\n    }\n  };\n\n  Digit.prototype.createValueUpdaterForSet = function(oldVisVal, newVisVal, isInc){\n\n    //we'll need integer value much more frequently then boolean\n    isInc = +isInc;\n\n    // no need for updater\n    if(oldVisVal === newVisVal) {\n      this._updateValue = function(){ return 0; };\n      return;\n    }\n\n    this._setVisValue = isInc ? this.setVis2Value : this.setVisValue;\n\n    // special last digit updater\n    if(this._num === 0){\n      this._updateValue = function(value){ return this._setVisValue(value - isInc); };\n      return;\n    }\n\n    // creating value up or down limiter\n    var limit;\n    if(isInc){\n      limit = function(v){\n        if(v < oldVisVal) return oldVisVal;\n        if(newVisVal < v) return newVisVal;\n        return v;\n      };\n    }else{\n      // looks like this variant of limit function never affect value!!\n      limit = function(v){\n        if(v < newVisVal) return newVisVal;\n        if(oldVisVal < v) return oldVisVal;\n        return v;\n      };\n    }\n\n    //a number of highest digits can have only dependent move style (impulsive)\n    //in cases of constant spin speed for visual comfort\n    //so, it accept \"fracPrev\" parameter as well\n    var maxPercDiff = this._num - this.owner._maxPerceptibleDgt;\n    if(maxPercDiff >= 1){\n      this._updateValue = function(value, fracPrev, empty){\n        var round = Math.floor(value);\n        return this._setVisValue(limit(round + fracPrev), empty);\n      };\n      return;\n    }\n\n    // this updater can change its move style over time\n    this._updateValue = function(value, fracPrev, empty){\n      //a kind of indicator of digit spin speed level\n      var percDiff = this._num - this.owner._perceptibleDgt;\n\n      //fastest spin speed level - digit spinning is near or entirely not perceptible\n      //thus it's spinning independently of other digits\n      if(percDiff < 1){\n        return this._setVisValue(limit(value - isInc), empty);\n      }\n\n      var round = Math.floor(value);\n\n      //medium spin speed level - digit spinning becomes perceptible\n      //thus it's spinning partially dependent on previos digit\n      if(percDiff < 2){\n        percDiff--;\n        var frac = value - round;\n        frac = percDiff * fracPrev + (1 - percDiff) * (frac - isInc);\n        return this._setVisValue(limit(round + frac), empty);\n      }\n\n      //slowest spin speed level - digit spins fully dependent on previos digit\n      return this._setVisValue(limit(round + fracPrev), empty);\n    };\n  };\n\n  Digit.prototype.setVisValue = function(value, empty){\n\n    this._value = value;\n\n    var round = Math.floor(value);\n\n    var rnDgt = round % 10\n    , frac = value - round\n    ;\n\n    var shift0 = frac * this.owner._height;\n    var shift1 = shift0 - this.owner._height;\n\n    this.$card0.css(\"top\", shift0 + \"px\"); //positive - lower  / smaller\n    this.$card1.css(\"top\", shift1 + \"px\"); //negative - higher / bigger\n\n    var zero = empty ? \"\" : \"0\";\n    var zRnDgt = zero + rnDgt;\n    if(this._zRnDgt !== zRnDgt){\n      this._zRnDgt = zRnDgt;\n      this.$card0.text(rnDgt === 0 ? zero : rnDgt);\n      this.$card1.text(rnDgt === 9 ? zero : rnDgt + 1);\n    }\n\n    empty = rnDgt === 0 && frac < 0.3 && empty;\n    if(!this.empty && empty) this.wasted = true;\n    if(this.empty && !empty) this.reveal();\n    this.empty = empty;\n\n    return rnDgt !== 9 ? 0 : frac;\n  };\n\n  Digit.prototype.setVis2Value = function(value, empty){\n    var frac = this.setVisValue(value, empty);\n    return frac ? (frac - 1) : 0;\n  };\n\n}));\n"]}